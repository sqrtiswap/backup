#!/bin/sh
#
# Copyright (c) 2021 Alexander MÃ¶ller <alexander.moeller@detmold.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

_fail="\033[31m" # red
_good="\033[32m" # green
_rset="\033[0m"  # reset

set -e

command -v rsync > /dev/null \
	&& RSYNC='rsync' \
	|| RSYNC='openrsync'

if [ -n "$BACKUP_LISTDIR" ] ; then
	_listdir="$BACKUP_LISTDIR"
else
	printf "${_fail}%s${_rset}%s\n" "Error: " "Specify location of backup lists with BACKUP_LISTDIR."
	exit 1
fi

if [ -n "$BACKUP_DATADIR" ] ; then
	_datadir="$BACKUP_DATADIR"
else
	printf "${_fail}%s${_rset}%s\n" "Error: " "Specify location of backup lists with BACKUP_DATADIR."
	exit 1
fi

backup() {
	if command -v todo > /dev/null ; then
		# todo(1) report
		nr_of_reports="$(grep -c "$(date +%F)" "$TODODIR"/report.txt)"
		[ "${nr_of_reports}" -lt 1 ] && todo -q report
	fi

	# backup with RSYNC
	[ -n "$2" ] && _mntpoint="$2" || exit 1
	dirlist="${_listdir}"/list-backup.txt
	nr=$(($(grep -c '' "$dirlist")+1))
	i=0
	while IFS= read -r d ; do
		i=$((i+1))
		"$RSYNC" -av --delete --exclude-from="${_listdir}"/list-exclude.txt "$HOME/$d" "${_mntpoint}/" \
			&& printf "${_good}%s${_rset}\n\n" "---> Synced $i/${nr} ($d)" \
			|| exit 1
	done < "$dirlist"

	# backup ~/mbox if it exists
	if [ -f "$HOME"/mbox ] ; then
		cp -vf "$HOME"/mbox "${_mntpoint}" \
			&& printf "${_good}%s${_rset}\n\n" "---> Synced ${nr}/${nr} (mbox)" \
			|| exit 1
	else
		printf "%s does not exist. Nothing to backup.\n" "$HOME/mbox" \
			&& printf "${_good}%s${_rset}\n\n" "---> Synced ${nr}/${nr} (mbox)" \
			|| exit 1
	fi
}

backup_restic() {
	# backup with restic(1)
	[ -n "$2" ] && _mntpoint="$2" || exit 1
	restic backup \
		--repo="${_mntpoint}" \
		--verbose \
		--exclude-file="${_listdir}"/list-exclude.txt \
		--files-from-verbatim "${_listdir}"/list-restic.txt
}

check_bitrot() {
	# use bitrot(1) to detect errors in important directories
	checklist="${_listdir}"/list-bitrot.txt
	nr=$(grep -c '' "$checklist")
	i=0
	while IFS= read -r d ; do
		i=$((i+1))
		cd "$HOME"/"$d" && bitrot \
			&& printf "${_good}%s${_rset}\n\n" "---> checked bitrot $i/${nr} ($HOME/$d)" \
			|| exit 1
	done < "$checklist"
}

checkout_restic() {
	_repo="$2"
	_snapshot="$3"
	_target="$4"
	_path="$5"
	restic -r "${_repo}" restore "${_snapshot}" --target "${_target}" --include "${_path}"
}

collect_special() {
	if command -v notmuch > /dev/null ; then
		# dump notmuch database
		notmuch dump --output="${_datadir}"/notmuch-dump.txt \
			&& printf "${_good}%s${_rset}\n" "notmuch database dumped" \
			|| exit 1
	fi
}

collect_installs() {
	printf "%s\n" "---> Start collecting installed packages:"
	OS=$(uname -s)
	if [ "${OS}" = "OpenBSD" ] ; then
		pkg_info -tz >> "${_datadir}"/intalls/openbsd-pkg.txt \
			&& printf "${_good}%s${_rset}\n" "collected OpenBSD packages" \
			|| exit 1
	elif [ "${OS}" = "Linux" ] ; then
		if [ "$(awk -F "(\"| )" 'NR == 1 { print $2 }' /etc/os-release)" = "Fedora" ] ; then
			dnf history userinstalled >> "${_datadir}"/installs/dnf.txt \
				&& printf "${_good}%s${_rset}\n" "collected Fedora packages" \
				|| exit 1
			flatpak list --app >> "${_datadir}"/installs/flatpak.txt \
				&& printf "${_good}%s${_rset}\n" "collected Flatpaks packages" \
				|| exit 1
		fi
	elif [ "${OS}" = "Darwin" ] ; then
		if command -v mas > /dev/null ; then
			mas list > "${_datadir}"/installs/mascli.txt \
			&& printf "${_good}%s${_rset}\n" "mas installs collected" \
			|| exit 1
		fi
	else
		printf "${_fail}%s${_rset}\n" "OS is unknown. No packages collected."
	fi
	if command -v brew > /dev/null ; then
		brew bundle dump --force --file="${_datadir}"/installs/Brewfile \
			&& printf "${_good}%s${_rset}\n" "Brewfile created" \
			|| exit 1
	fi
}

usage() { cat << USAGE
${0##*/} - a selection of scripts for reliable backups
usage: ${0##*/}	all [dir]                 -> backup all directories to [dir]
		bitrot                    -> check for bitrot in selected directories
		checkout_restic [options] -> Checkout restic snapshot data with variety of options (currently not documented)
		prep                      -> prepare for backing up
		restic [repo]             -> backup to a restic(1) [repo]
USAGE
	exit 1
}

set +e

case $1 in
all)
	backup "$@"
	;;
bitrot)
	check_bitrot
	;;
checkout)
	checkout_restic "$@"
	;;
prep)
	collect_special
	check_bitrot
	collect_installs
	;;
restic)
	backup_restic "$@"
	;;
*)
	usage
	;;
esac
