#!/bin/sh

_fail="\033[31m"
_good="\033[32m"
_rset="\033[0m"

set -e

if command -v rsync > /dev/null ; then
	RSYNC='rsync'
else
	RSYNC='openrsync'
fi

if command -v doas > /dev/null ; then
	_doas=doas
else
	_doas=sudo
fi

_resourcedir="$HOME"/sources/backup

dirlist="${_resourcedir}"/directories.txt

backup() {
	if [ -n "$2" ] ; then
		_mntpoint="$2"
	else
		exit 1
	fi

	nr=$(grep -c '' "$dirlist")
	i=0

	while IFS= read -r d ; do
		i=$((i+1))
		"$RSYNC" -av --delete "$HOME"/"$d" "${_mntpoint}" \
			&& printf "${_good}%s${_rset}\n" "---> Synced $i/${nr}" \
			|| exit 1
		echo "$d: $(find "$HOME"/"$d" -type f | wc -l)" >> "$HOME"/checkfilenumber-src.txt
		echo "$d: $(find "${_mntpoint}"/"$d" -type f | wc -l)" >> "$HOME"/checkfilenumber-dest.txt
	done < "$dirlist"
	[ -f "$HOME"/mbox ] && cp "$HOME"/mbox "${_mntpoint}"

	echo "Check file number:"
	diff "$HOME"/checkfilenumber-src.txt "$HOME"/checkfilenumber-dest.txt \
		&& printf "${_good}%s${_rset}\n" "---> File number is consistent." \
		&& rm "$HOME"/checkfilenumber-*.txt
}

check_bitrot() {
	checklist='Pictures Wichtig documents media'
	nr=4
	i=0
	for d in $checklist ; do
		i=$((i+1))
		cd "$HOME"/"$d" && bitrot \
			&& printf "${_good}%s${_rset}\n" "---> checked bitrot $i/${nr} ($HOME/$d)" \
			|| exit 1
	done
}

scan_collection() {
	echo "Scan collected dotfiles:"
	"${_doas}" freshclam && clamscan -riz --scan-pdf=yes "${_dotdir}"
}

collect_dotfiles() {
	if mkdir -p "${_dotdir}" ; then
		printf "%s[1/6] ----- Created %s.%s\n" "${_good}" "${_dotdir}" "${_rset}"
	else
		printf "%s[1/6] ----- Creating %s failed.%s\n" "${_fail}" "${_dotdir}" "${_rset}"
		exit 1
	fi

	if "${_resourcedir}"/collect_config ; then
		printf "%s[2/6] ----- Collected configurations.%s\n" "${_good}" "${_rset}"
	else
		printf "%s[2/6] ----- Collecting configurations failed.%s\n" "${_fail}" "${_rset}"
		exit 1
	fi

	if "${_resourcedir}"/collect_privconfig ; then
		printf "%s[3/6] ----- Collected privileged configurations.%s\n" "${_good}" "${_rset}"
	else
		printf "%s[3/6] ----- Collecting privileged configurations failed.%s\n" "${_fail}" "${_rset}"
		exit 1
	fi

	if "${_resourcedir}"/collect_installs ; then
		printf "%s[4/6] ----- Created list of installed packages.%s\n" "${_good}" "${_rset}"
	else
		printf "%s[4/6] ----- Creating list of installed packages failed.%s\n" "${_fail}" "${_rset}"
		exit 1
	fi

	if "${_resourcedir}"/collect_data ; then
		printf "%s[5/6] ----- Collected data.%s\n" "${_good}" "${_rset}"
	else
		printf "%s[5/6] ----- Collecting data failed.%s\n" "${_fail}" "${_rset}"
		exit 1
	fi

	if scan_collection ; then
		printf "%s[6/6] ----- Clamscan: No infected files found.%s\n" "${_good}" "${_rset}"
	else
		printf "%s[6/6] ----- Clamscan: Infected files found.%s\n" "${_fail}" "${_rset}"
		exit 1
	fi
}

prepare_backup() {
	if pgrep mutt > /dev/null ; then
		echo "mutt is still running." \
			&& exit 1
	fi
}

prepare_collecting_dotfiles() {
	if pgrep mutt > /dev/null ; then
		echo "mutt is still running." \
			&& exit 1
	else
		_dotdir="$HOME"/dotfiles/"$(date +%F)"
		export _dotdir
		[ -d "${_dotdir}" ] \
			&& echo "${_dotdir} already exists. Do some clean-up!" \
			&& exit 1
	fi
}

usage() { cat << USAGE
${0##*/} - a selection of scripts for reliable backups
usage: ${0##*/}	all [dir] -> backup all directories to [dir]
		bitrot    -> check for bitrot in selected directories
		dotfiles  -> collect dotfiles"
USAGE
	exit 1
}

set +e

case $1 in
all)
	prepare_backup
	backup "$@"
	;;
bitrot)
	check_bitrot
	;;
dotfiles)
	prepare_collecting_dotfiles
	collect_dotfiles
	;;
*)
	usage
	;;
esac
